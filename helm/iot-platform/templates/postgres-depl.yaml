apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgres
  namespace: {{ .Release.Namespace }}
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
          env:
            {{- range $key, $value := .Values.postgres.config }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          ports:
            - containerPort: 5432
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: schema-sql
              mountPath: /docker-entrypoint-initdb.d/

          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "sleep 10 && psql -U postgres -f /docker-entrypoint-initdb.d/schema.sql"]

      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-postgres-data
        - name: schema-sql
          configMap:
            name: {{ .Release.Name }}-postgres-schema

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: postgres
  ports:
    - port: {{ .Values.postgres.service.port }}
      targetPort: 5432